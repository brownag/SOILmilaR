[{"path":[]},{"path":"http://humus.rocks/SOILmilaR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"CC0 1.0 Universal","title":"CC0 1.0 Universal","text":"CREATIVE COMMONS CORPORATION LAW FIRM PROVIDE LEGAL SERVICES. DISTRIBUTION DOCUMENT CREATE ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES INFORMATION “-” BASIS. CREATIVE COMMONS MAKES WARRANTIES REGARDING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER, DISCLAIMS LIABILITY DAMAGES RESULTING USE DOCUMENT INFORMATION WORKS PROVIDED HEREUNDER.","code":""},{"path":"http://humus.rocks/SOILmilaR/LICENSE.html","id":"statement-of-purpose","dir":"","previous_headings":"","what":"Statement of Purpose","title":"CC0 1.0 Universal","text":"laws jurisdictions throughout world automatically confer exclusive Copyright Related Rights (defined ) upon creator subsequent owner(s) (, “owner”) original work authorship /database (, “Work”). Certain owners wish permanently relinquish rights Work purpose contributing commons creative, cultural scientific works (“Commons”) public can reliably without fear later claims infringement build upon, modify, incorporate works, reuse redistribute freely possible form whatsoever purposes, including without limitation commercial purposes. owners may contribute Commons promote ideal free culture production creative, cultural scientific works, gain reputation greater distribution Work part use efforts others. /purposes motivations, without expectation additional consideration compensation, person associating CC0 Work (“Affirmer”), extent owner Copyright Related Rights Work, voluntarily elects apply CC0 Work publicly distribute Work terms, knowledge Copyright Related Rights Work meaning intended legal effect CC0 rights. Copyright Related Rights. Work made available CC0 may protected copyright related neighboring rights (“Copyright Related Rights”). Copyright Related Rights include, limited , following: right reproduce, adapt, distribute, perform, display, communicate, translate Work; moral rights retained original author(s) /performer(s); publicity privacy rights pertaining person’s image likeness depicted Work; rights protecting unfair competition regards Work, subject limitations paragraph 4(), ; rights protecting extraction, dissemination, use reuse data Work; database rights (arising Directive 96/9/EC European Parliament Council 11 March 1996 legal protection databases, national implementation thereof, including amended successor version directive); similar, equivalent corresponding rights throughout world based applicable law treaty, national implementations thereof. Waiver. greatest extent permitted , contravention , applicable law, Affirmer hereby overtly, fully, permanently, irrevocably unconditionally waives, abandons, surrenders Affirmer’s Copyright Related Rights associated claims causes action, whether now known unknown (including existing well future claims causes action), Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“Waiver”). Affirmer makes Waiver benefit member public large detriment Affirmer’s heirs successors, fully intending Waiver shall subject revocation, rescission, cancellation, termination, legal equitable action disrupt quiet enjoyment Work public contemplated Affirmer’s express Statement Purpose. Public License Fallback. part Waiver reason judged legally invalid ineffective applicable law, Waiver shall preserved maximum extent permitted taking account Affirmer’s express Statement Purpose. addition, extent Waiver judged Affirmer hereby grants affected person royalty-free, non transferable, non sublicensable, non exclusive, irrevocable unconditional license exercise Affirmer’s Copyright Related Rights Work () territories worldwide, (ii) maximum duration provided applicable law treaty (including future time extensions), (iii) current future medium number copies, (iv) purpose whatsoever, including without limitation commercial, advertising promotional purposes (“License”). License shall deemed effective date CC0 applied Affirmer Work. part License reason judged legally invalid ineffective applicable law, partial invalidity ineffectiveness shall invalidate remainder License, case Affirmer hereby affirms () exercise remaining Copyright Related Rights Work (ii) assert associated claims causes action respect Work, either case contrary Affirmer’s express Statement Purpose. Limitations Disclaimers. trademark patent rights held Affirmer waived, abandoned, surrendered, licensed otherwise affected document. Affirmer offers Work -makes representations warranties kind concerning Work, express, implied, statutory otherwise, including without limitation warranties title, merchantability, fitness particular purpose, non infringement, absence latent defects, accuracy, present absence errors, whether discoverable, greatest extent permissible applicable law. Affirmer disclaims responsibility clearing rights persons may apply Work use thereof, including without limitation person’s Copyright Related Rights Work. , Affirmer disclaims responsibility obtaining necessary consents, permissions rights required use Work. Affirmer understands acknowledges Creative Commons party document duty obligation respect CC0 use Work.","code":""},{"path":"http://humus.rocks/SOILmilaR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Brown. Maintainer.","code":""},{"path":"http://humus.rocks/SOILmilaR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brown (2025). SOILmilaR: Apply Similar Soils Contrasts. R package version 0.1.0, http://github.com/brownag/SOILmilaR.","code":"@Manual{,   title = {SOILmilaR: Apply Similar Soils Contrasts},   author = {Andrew Brown},   year = {2025},   note = {R package version 0.1.0},   url = {http://github.com/brownag/SOILmilaR}, }"},{"path":"http://humus.rocks/SOILmilaR/index.html","id":"soilmilar","dir":"","previous_headings":"","what":"Apply Similar Soils Contrasts","title":"Apply Similar Soils Contrasts","text":"goal {SOILmilaR} provide methods applying standardized, customizable “similar soils” rules site-level data derived various sources. core function implement method similar_soils(), compares set soils one soil type combination soil conditions. similar_soils() can called iteratively using design_mapunit() function. method generally follows process outlined Norfleet & Eppinette (1993): Norfleet, M.L. Eppinette, R.T. (1993), Mathematical Model Determining Similar Contrasting Inclusions Map Unit Descriptons. Soil Survey Horizons, 34: 4-5. https://doi.org/10.2136/sh1993.1.0004","code":""},{"path":"http://humus.rocks/SOILmilaR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Apply Similar Soils Contrasts","text":"can install development version SOILmilaR GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"brownag/SOILmilaR\")"},{"path":"http://humus.rocks/SOILmilaR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Apply Similar Soils Contrasts","text":"example shows similar_soils() works. First generate synthetic data set using random soil depths across range depth classes, well random particle size control section clay content fragments. apply subset taxonomic rules loamy soils assign taxonomic particle size class. create rating functions properties interest. run similar_soils(), pass data.frame SoilProfileCollection first argument. second argument named list provides mapping site-level properties rating functions. list elements functions minimum arguments x ..., element names corresponding columns. inspect tabular output single run. rating values can used surrogates detailed properties calculating distance. , use cluster::agnes() cluster similar sets rating values, render dendrogram.  set absolute=FALSE differences soils can negative, can help processing ratings ordinal nature.","code":"library(SOILmilaR)  data(\"loamy\", package = \"SOILmilaR\") rate_taxpartsize <- function(x) {   dplyr::case_match(x,                      c(\"sandy-skeletal\") ~ 1,                     c(\"sandy\") ~ 3,                     c(\"loamy\", \"coarse-loamy\", \"coarse-silty\") ~ 5,                     c(\"fine-loamy\", \"fine-silty\") ~ 7,                     c(\"clayey\", \"fine\") ~ 9,                     c(\"very-fine\") ~ 11,                     c(\"loamy-skeletal\", \"clayey-skeletal\") ~ 13,                     \"fragmental\" ~ 15) }  rate_depthclass <- function(x,                             breaks = c(                               `very shallow` = 25,                               `shallow` = 50,                               `moderately deep` = 100,                               `deep` = 150,                               `very deep` = 1e4                             ),                             ...) {   res <- cut(x, c(0, breaks))   factor(res, levels = levels(res), labels = names(breaks), ordered = TRUE) }  rate_pscs_clay <- function(x, breaks = c(18, 35, 60, 100)) {   res <- cut(x, c(0, breaks))   factor(res, levels = levels(res), ordered = TRUE) } m <- list(taxpartsize = rate_taxpartsize,           depth = rate_depthclass,           pscs_clay = rate_pscs_clay)  s <- similar_soils(loamy, m) #> comparing to dominant reference condition (`7.deep.(18,35]` on 7 rows) head(s) #>   id taxpartsize           depth pscs_clay similar_dist similar_single #> 1 A1           7 moderately deep   (18,35]            1              1 #> 2 B1           7            deep   (18,35]            0              0 #> 3 C1           7 moderately deep   (18,35]            1              1 #> 4 D1           7            deep   (18,35]            0              0 #> 5 E1           5            deep    (0,18]            3              2 #> 6 F1           5         shallow    (0,18]            5              2 #>                       group similar #> 1 7.moderately deep.(18,35]    TRUE #> 2            7.deep.(18,35]    TRUE #> 3 7.moderately deep.(18,35]    TRUE #> 4            7.deep.(18,35]    TRUE #> 5             5.deep.(0,18]   FALSE #> 6          5.shallow.(0,18]   FALSE # inspect distances using agglomerative clustering+dendrogram d <- cluster::agnes(s[, 5, drop = FALSE], method = \"gaverage\") d$height <- d$height + 0.2 # fudge factor for 0-distance plot(stats::as.dendrogram(d), center = TRUE, type = \"triangle\") # allow relative contrast ratings to be negative # (i.e. ordinal factors, concept of \"limiting\") # absolute value is still used for \"similar\" threshold s2 <- similar_soils(loamy, m, absolute = FALSE) #> comparing to dominant reference condition (`7.deep.(18,35]` on 7 rows)  # inspect distances unsing agglomerative clustering+dendrogram d2 <- cluster::agnes(s2[, 5, drop = FALSE], method = \"gaverage\") d2$height <- d2$height + 0.2 # fudge factor for 0-distance  plot(stats::as.dendrogram(d2), center = TRUE, type = \"triangle\")"},{"path":"http://humus.rocks/SOILmilaR/index.html","id":"design_mapunit-function","dir":"","previous_headings":"Example","what":"design_mapunit() function","title":"Apply Similar Soils Contrasts","text":"higher-level wrapper function around similar_soils() design_mapunit(). takes inputs similar_soils() processes data iteratively data remaining grouped. use input data.frame rating function. assume collection observations x spatially representative mapunit extent, reasonable consider resulting proportions similar abundance represented component percentages. literal interpretation output result map unit 5 groups similar soils, 4 major components. Alpha appears dominant, Beta Gamma co-dominant second place, Delta Epsilon dissimilar, limiting, strongly contrasting, Epsilon minor component. summarize properties resulting groups, : Alpha: moderately deep deep, loamy-skeletal Beta: deep moderately deep, fine-loamy Gamma: deep moderately deep, coarse-loamy Delta: shallow, loamy Epsilon: moderately deep deep, fragmental Depending context soils occur within mapunit, one may opt combine (perhaps split ) unique conditions pertain unique soil properties, landforms, vegetation. Also, perhaps rating functions adjusted. Beta Gamma appear similar, rating groups split coarse fine loamy combined.","code":"d <- design_mapunit(loamy, m)  d[order(d$component), ] #>    id    taxpartsize     depth pscs_clay pscs_frags component #> 1  A1     fine-loamy  68.07141  34.26617 13.3430897     Alpha #> 2  B1     fine-loamy 125.65509  25.70668 10.3920511     Alpha #> 3  C1     fine-loamy  82.03235  29.51870  9.6076022     Alpha #> 4  D1     fine-loamy 136.54700  27.73477 33.8624746     Alpha #> 11 A2     fine-loamy 145.74779  20.42760  0.6874675     Alpha #> 12 B2     fine-loamy 138.76439  25.04729  6.6330011     Alpha #> 13 C2     fine-loamy 114.43111  25.03331 11.9838727     Alpha #> 14 D2     fine-loamy 126.47875  24.27037 12.9255822     Alpha #> 21 A3     fine-loamy 111.48825  30.82608  3.6542921     Alpha #> 23 C3     fine-loamy  79.15651  30.07310  6.2647017     Alpha #> 24 D3     fine-loamy  66.55412  18.01062 28.9167000     Alpha #> 8  H1 loamy-skeletal 137.62819  14.16824 49.8535505      Beta #> 9  I1 loamy-skeletal  98.41503  15.31168 82.2289934      Beta #> 10 J1 loamy-skeletal  87.51069  17.81801 38.6778412      Beta #> 18 H2 loamy-skeletal  59.88691  15.86385 53.8326966      Beta #> 20 J2 loamy-skeletal  61.63697  17.43131 44.3615694      Beta #> 28 H3 loamy-skeletal 128.42479  16.45108 57.3262779      Beta #> 30 J3 loamy-skeletal  85.58064  14.44454 39.3763163      Beta #> 6  F1          loamy  40.23900  17.59930 27.0047312     Delta #> 15 E2          loamy  37.83057  14.60978 23.4627516     Delta #> 22 B3          loamy  45.90668  28.69676 10.0208338     Delta #> 19 I2     fragmental  71.59082  15.06389 97.3761340   Epsilon #> 29 I3     fragmental 126.34937  15.40719 97.1617265   Epsilon #> 5  E1   coarse-loamy 143.15374  14.41170 25.7369392     Gamma #> 7  G1   coarse-loamy  95.73213  14.98435 23.0575846     Gamma #> 16 F2   coarse-loamy  89.94654  14.55522 14.9567534     Gamma #> 17 G2   coarse-loamy 122.22285  14.93214 13.0607596     Gamma #> 25 E3   coarse-loamy 128.68360  15.90127 12.4687515     Gamma #> 26 F3   coarse-loamy  86.57938  14.88048 20.4374258     Gamma #> 27 G3   coarse-loamy 128.15740  15.51927 33.6389675     Gamma  sort(prop.table(table(d$component)), decreasing = TRUE) #>  #>      Alpha       Beta      Gamma      Delta    Epsilon  #> 0.36666667 0.23333333 0.23333333 0.10000000 0.06666667 apply(d[3:5], 2, \\(dd) {   aggregate(dd, by = list(component = d$component), quantile) }) #> $depth #>   component      x.0%     x.25%     x.50%     x.75%    x.100% #> 1     Alpha  66.55412  80.59443 114.43111 131.51288 145.74779 #> 2      Beta  59.88691  73.60880  87.51069 113.41991 137.62819 #> 3     Delta  37.83057  39.03479  40.23900  43.07284  45.90668 #> 4   Epsilon  71.59082  85.28045  98.97009 112.65973 126.34937 #> 5     Gamma  86.57938  92.83933 122.22285 128.42050 143.15374 #>  #> $pscs_clay #>   component     x.0%    x.25%    x.50%    x.75%   x.100% #> 1     Alpha 18.01062 24.65184 25.70668 29.79590 34.26617 #> 2      Beta 14.16824 14.87811 15.86385 16.94120 17.81801 #> 3     Delta 14.60978 16.10454 17.59930 23.14803 28.69676 #> 4   Epsilon 15.06389 15.14972 15.23554 15.32137 15.40719 #> 5     Gamma 14.41170 14.71785 14.93214 15.25181 15.90127 #>  #> $pscs_frags #>   component       x.0%      x.25%      x.50%      x.75%     x.100% #> 1     Alpha  0.6874675  6.4488514 10.3920511 13.1343360 33.8624746 #> 2      Beta 38.6778412 41.8689428 49.8535505 55.5794872 82.2289934 #> 3     Delta 10.0208338 16.7417927 23.4627516 25.2337414 27.0047312 #> 4   Epsilon 97.1617265 97.2153284 97.2689302 97.3225321 97.3761340 #> 5     Gamma 12.4687515 14.0087565 20.4374258 24.3972619 33.6389675"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanBootCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence interval for the mean of binomial proportions using bootstrapping — BinomCIMeanBootCustom","title":"Calculate confidence interval for the mean of binomial proportions using bootstrapping — BinomCIMeanBootCustom","text":"method accounts unique confidence intervals experiment sampling confidence intervals bootstrapping. Upper lower confidence interval boundaries determined using quantiles (corresponding specified level alpha) bootstrapped estimates.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanBootCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval for the mean of binomial proportions using bootstrapping — BinomCIMeanBootCustom","text":"","code":"BinomCIMeanBootCustom(x, n, alpha = 0.05, B = 1000)"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanBootCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval for the mean of binomial proportions using bootstrapping — BinomCIMeanBootCustom","text":"x matrix numeric. First column matrix, numeric vector, represent estimated binomial proportion experiment. n integer. Number trials per experiment. length(n) match number estimated binomial proportions repeated. alpha numeric. Probability level Z-value normal distribution confidence interval calculation. B integer. Number bootstrap replicates use. Default: 1000","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanBootCustom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence interval for the mean of binomial proportions using bootstrapping — BinomCIMeanBootCustom","text":"matrix containing columns \"est\", \"lwr.ci\", \"upr.ci\"","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanBootCustom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence interval for the mean of binomial proportions using bootstrapping — BinomCIMeanBootCustom","text":"","code":"library(DescTools)  # example: 3 binomial experiments, 10 trials, confidence level 0.8 x <- DescTools::BinomCI(c(5,6,7), 10, 0.8)  # Inspect input x #>     est    lwr.ci    upr.ci #> x.1 0.5 0.3122044 0.6877956 #> x.2 0.6 0.4013518 0.7704344 #> x.3 0.7 0.4973717 0.8462008  # Calculate mean binomial probability and CI using bootstrapping # NOTE: the estimated CI from BinomCI() are considered in this method BinomCIMeanBootCustom(x, 10, B = 100) #>            est lwr.ci upr.ci #> [1,] 0.5946667 0.4215 0.7616  # Compare to normal approximation BinomCIMeanNorm(x, 10) #>      est    lwr.ci    upr.ci #> [1,] 0.6 0.4399696 0.7600304  # Compare to straight arithmetic average of experiments colMeans(x) #>       est    lwr.ci    upr.ci  #> 0.6000000 0.4036427 0.7681436"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence interval for the mean of binomial proportions — BinomCIMeanNorm","title":"Calculate confidence interval for the mean of binomial proportions — BinomCIMeanNorm","text":"method account estimated confidence intervals unique experiment, uses normal approximation build confidence intervals. suitable cases Central Limit Theorem holds (.e. 30+ experiments).","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval for the mean of binomial proportions — BinomCIMeanNorm","text":"","code":"BinomCIMeanNorm(x, n, alpha = 0.05)"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval for the mean of binomial proportions — BinomCIMeanNorm","text":"x matrix numeric. First column matrix, numeric vector, represent estimated binomial proportion experiment. n integer. Number trials per experiment. length(n) match number estimated binomial proportions repeated. alpha numeric. Probability level Z-value normal distribution confidence interval calculation.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanNorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence interval for the mean of binomial proportions — BinomCIMeanNorm","text":"matrix containing columns \"est\", \"lwr.ci\", \"upr.ci\"","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanNorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence interval for the mean of binomial proportions — BinomCIMeanNorm","text":"","code":"library(DescTools)  # example: 3 binomial experiments, 10 trials, confidence level 0.8 x <- DescTools::BinomCI(c(5,6,7), 10, 0.8)  # Inspect input x #>     est    lwr.ci    upr.ci #> x.1 0.5 0.3122044 0.6877956 #> x.2 0.6 0.4013518 0.7704344 #> x.3 0.7 0.4973717 0.8462008  # Calculate mean binomial probability and CI using normal approximation # NOTE: the estimated CI from BinomCI() are _not_ considered in this method BinomCIMeanNorm(x, 10) #>      est    lwr.ci    upr.ci #> [1,] 0.6 0.4399696 0.7600304  # compare to straight arithmetic average colMeans(x) #>       est    lwr.ci    upr.ci  #> 0.6000000 0.4036427 0.7681436"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolCustom","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolCustom","text":"method accounts unique confidence intervals experiment calculating pooled variance adjusted confidence interval around binomial probability. use bootstrapping rely large number trials per experiment (though, number trials small; .e n least 5, ideally larger) necessarily rely many repetitions experiment final mean binomial probability calculated using t-distribution number degrees freedom corresponding effective sample size. effective sample size used calculate standard error pooled variance across experiments construct final confidence interval.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolCustom","text":"","code":"BinomCIMeanPoolCustom(x, n, alpha = 0.05)"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolCustom","text":"x matrix numeric. First column matrix, numeric vector, represent estimated binomial proportion experiment. n integer. Number trials per experiment. length(n) match number estimated binomial proportions repeated. alpha numeric. Probability level Z-value normal distribution confidence interval calculation.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolCustom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolCustom","text":"matrix containing columns \"est\", \"lwr.ci\", \"upr.ci\"","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolCustom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolCustom","text":"","code":"library(DescTools)  # example: 3 binomial experiments, 10 trials, confidence level 0.8 x <- DescTools::BinomCI(c(5,6,7), 10, 0.8)  # Inspect input x #>     est    lwr.ci    upr.ci #> x.1 0.5 0.3122044 0.6877956 #> x.2 0.6 0.4013518 0.7704344 #> x.3 0.7 0.4973717 0.8462008  # Calculate confidence interval for mean binomial probability # NOTE: accounting for custom CI in pooled variance BinomCIMeanPoolCustom(x, 10) #>      est    lwr.ci    upr.ci #> [1,] 0.6 0.3811151 0.8188849  # Compare to t-distribution BinomCIMeanPoolNorm(x, 10) #>      est    lwr.ci    upr.ci #> [1,] 0.6 0.3788071 0.8211929  # Compare to arithmetic average colMeans(x) #>       est    lwr.ci    upr.ci  #> 0.6000000 0.4036427 0.7681436"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolNorm","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolNorm","text":"method estimates confidence intervals unique experiment using normal approximation. suitable number trials experiment large enough Central Limit Theorem holds (.e. 30+ trials per experiment). necessarily rely many repetitions experiment final mean binomial probability calculated using t-distribution number degrees freedom corresponding effective sample size. effective sample size used calculate standard error pooled variance across experiments construct final confidence interval.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolNorm","text":"","code":"BinomCIMeanPoolNorm(x, n, alpha = 0.05)"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolNorm","text":"x matrix numeric. First column matrix, numeric vector, represent estimated binomial proportion experiment. n integer. Number trials per experiment. length(n) match number estimated binomial proportions repeated. alpha numeric. Probability level Z-value normal distribution confidence interval calculation.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolNorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolNorm","text":"matrix containing columns \"est\", \"lwr.ci\", \"upr.ci\"","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomCIMeanPoolNorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate confidence interval for the mean of binomial probabilities using pooled variance — BinomCIMeanPoolNorm","text":"","code":"library(DescTools)  # example: 3 binomial experiments, 10 trials, confidence level 0.8 x <- DescTools::BinomCI(c(5,6,7), 10, 0.8)  # Inspect input x #>     est    lwr.ci    upr.ci #> x.1 0.5 0.3122044 0.6877956 #> x.2 0.6 0.4013518 0.7704344 #> x.3 0.7 0.4973717 0.8462008  BinomCIMeanPoolNorm(x, 10) #>      est    lwr.ci    upr.ci #> [1,] 0.6 0.3788071 0.8211929  # Compare to arithmetic average colMeans(x) #>       est    lwr.ci    upr.ci  #> 0.6000000 0.4036427 0.7681436"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarCustom.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pooled variance for related binomial experiments with given confidence intervals — BinomVarCustom","title":"Calculate pooled variance for related binomial experiments with given confidence intervals — BinomVarCustom","text":"method calculates pooled variance related binomial experiments confidence intervals. Instead relying normal approximation, user can calculate estimate confidence intervals. method adjusts calculated binomial variance account arbitrary given confidence interval, calculates pooled variance across experiments.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarCustom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pooled variance for related binomial experiments with given confidence intervals — BinomVarCustom","text":"","code":"BinomVarCustom(n, p_values, ci_intervals)"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarCustom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pooled variance for related binomial experiments with given confidence intervals — BinomVarCustom","text":"n integer. Number trials per experiment p_values numeric. Probability success experiment. ci_intervals list numeric vectors. list length equal length p_values. element list contains numeric vector length 2 denoting lower upper confidence limits.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarCustom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pooled variance for related binomial experiments with given confidence intervals — BinomVarCustom","text":"","code":"n <- 10  # Number of trials for each experiment  p_values <- c(0.2, 0.3, 0.4) # Probability of success for each experiment  # Wilson score intervals for each p wilson_intervals <- list(   c(0.1, 0.3),   c(0.2, 0.4),   c(0.3, 0.5) )  # Calculate pooled variance with custom confidence intervals BinomVarCustom(n, p_values, wilson_intervals) #> [1] NA"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pooled variance for related binomial experiments with confidence intervals — BinomVarNorm","title":"Calculate pooled variance for related binomial experiments with confidence intervals — BinomVarNorm","text":"method calculates pooled variance related binomial experiments confidence intervals. relies normal approximation / Central Limit Theorem develop confidence interval binomial probability vector p_values. order assumption work well, n large. method adjusts calculated binomial variance account normal approximation confidence interval, calculates pooled variance across experiments.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pooled variance for related binomial experiments with confidence intervals — BinomVarNorm","text":"","code":"BinomVarNorm(n, p_values, alpha = 0.05)"},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pooled variance for related binomial experiments with confidence intervals — BinomVarNorm","text":"n integer. Number trials per experiment. p_values numeric. Probability success experiment. alpha numeric. Probability level Z-value normal distribution confidence interval calculation.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/BinomVarNorm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pooled variance for related binomial experiments with confidence intervals — BinomVarNorm","text":"","code":"n <- c(10, 5, 30) p_values <- c(0.2, 0.3, 0.4) alpha <- 0.05  BinomVarNorm(n, p_values, alpha) #> [1] 12.04754"},{"path":"http://humus.rocks/SOILmilaR/reference/SOILmilaR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SOILmilaR: Apply Similar Soils Contrasts — SOILmilaR-package","title":"SOILmilaR: Apply Similar Soils Contrasts — SOILmilaR-package","text":"Provides methods applying standardized, customizable \"similar soils\" rules site-level data derived various sources.","code":""},{"path":[]},{"path":"http://humus.rocks/SOILmilaR/reference/design_mapunit.html","id":null,"dir":"Reference","previous_headings":"","what":"Design a Map Unit — design_mapunit","title":"Design a Map Unit — design_mapunit","text":"function calls similar_soils() iteratively estimate proportions observations corresponding distinct groups similar soils. Use exhaustively group observations (example, within map unit conceptual unit interest)","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/design_mapunit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Design a Map Unit — design_mapunit","text":"","code":"design_mapunit(   x,   mapping,   idname = \"id\",   component_labels = SOILmilaR::greekletters[[1]],   ... )"},{"path":"http://humus.rocks/SOILmilaR/reference/design_mapunit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Design a Map Unit — design_mapunit","text":"x data.frame SoilProfileCollection. mapping named list rating functions. idname name ID column x. Default: \"id\". component_labels character vector labels assign components. Default: greekletters[[1]] ... Additional arguments passed similar_soils(), threshold_single threshold_all.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/design_mapunit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Design a Map Unit — design_mapunit","text":"data.frame containing original data along new 'compname' column assigns map unit component label group similar soils.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/design_mapunit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Design a Map Unit — design_mapunit","text":"function automates iterative process calling similar_soils() build estimate map unit composition. special case, threshold_single threshold_all set 0, function use efficient method. directly group soils share exact combination rated properties, logical outcome zero-distance threshold. component labels assigned based size groups, largest group assigned first label.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/design_mapunit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Design a Map Unit — design_mapunit","text":"","code":"data(\"loamy\", package = \"SOILmilaR\")  rate_taxpartsize <- function(x) {   dplyr::case_match(x,                     c(\"sandy-skeletal\") ~ 1,                     c(\"sandy\") ~ 3,                     c(\"loamy\", \"coarse-loamy\", \"coarse-silty\") ~ 5,                     c(\"fine-loamy\", \"fine-silty\") ~ 7,                     c(\"clayey\", \"fine\") ~ 9,                     c(\"very-fine\") ~ 11,                     c(\"loamy-skeletal\", \"clayey-skeletal\") ~ 13,                     \"fragmental\" ~ 15) }  rate_depthclass <- function(x,                             breaks = c(                               `very shallow` = 25,                               `shallow` = 50,                               `moderately deep` = 100,                               `deep` = 150,                               `very deep` = 1e4                             ),                             ...) {   res <- cut(x, c(0, breaks))   factor(res, levels = levels(res), labels = names(breaks)) }  m <- list(taxpartsize = rate_taxpartsize, depth = rate_depthclass)  mapunit_composition <- design_mapunit(loamy, m)  mapunit_composition[order(mapunit_composition$component), ] #>    id    taxpartsize     depth pscs_clay pscs_frags component #> 1  A1     fine-loamy  68.07141  34.26617 13.3430897     Alpha #> 2  B1     fine-loamy 125.65509  25.70668 10.3920511     Alpha #> 3  C1     fine-loamy  82.03235  29.51870  9.6076022     Alpha #> 4  D1     fine-loamy 136.54700  27.73477 33.8624746     Alpha #> 11 A2     fine-loamy 145.74779  20.42760  0.6874675     Alpha #> 12 B2     fine-loamy 138.76439  25.04729  6.6330011     Alpha #> 13 C2     fine-loamy 114.43111  25.03331 11.9838727     Alpha #> 14 D2     fine-loamy 126.47875  24.27037 12.9255822     Alpha #> 21 A3     fine-loamy 111.48825  30.82608  3.6542921     Alpha #> 23 C3     fine-loamy  79.15651  30.07310  6.2647017     Alpha #> 24 D3     fine-loamy  66.55412  18.01062 28.9167000     Alpha #> 8  H1 loamy-skeletal 137.62819  14.16824 49.8535505      Beta #> 9  I1 loamy-skeletal  98.41503  15.31168 82.2289934      Beta #> 10 J1 loamy-skeletal  87.51069  17.81801 38.6778412      Beta #> 18 H2 loamy-skeletal  59.88691  15.86385 53.8326966      Beta #> 20 J2 loamy-skeletal  61.63697  17.43131 44.3615694      Beta #> 28 H3 loamy-skeletal 128.42479  16.45108 57.3262779      Beta #> 30 J3 loamy-skeletal  85.58064  14.44454 39.3763163      Beta #> 6  F1          loamy  40.23900  17.59930 27.0047312     Delta #> 15 E2          loamy  37.83057  14.60978 23.4627516     Delta #> 22 B3          loamy  45.90668  28.69676 10.0208338     Delta #> 19 I2     fragmental  71.59082  15.06389 97.3761340   Epsilon #> 29 I3     fragmental 126.34937  15.40719 97.1617265   Epsilon #> 5  E1   coarse-loamy 143.15374  14.41170 25.7369392     Gamma #> 7  G1   coarse-loamy  95.73213  14.98435 23.0575846     Gamma #> 16 F2   coarse-loamy  89.94654  14.55522 14.9567534     Gamma #> 17 G2   coarse-loamy 122.22285  14.93214 13.0607596     Gamma #> 25 E3   coarse-loamy 128.68360  15.90127 12.4687515     Gamma #> 26 F3   coarse-loamy  86.57938  14.88048 20.4374258     Gamma #> 27 G3   coarse-loamy 128.15740  15.51927 33.6389675     Gamma  sort(prop.table(table(mapunit_composition$component)), decreasing = TRUE) #>  #>      Alpha       Beta      Gamma      Delta    Epsilon  #> 0.36666667 0.23333333 0.23333333 0.10000000 0.06666667"},{"path":"http://humus.rocks/SOILmilaR/reference/greekletters.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Greek Letters in upper and lowercase, and ASCII equivalents — greekletters","title":"Table of Greek Letters in upper and lowercase, and ASCII equivalents — greekletters","text":"data.frame containing name, upper case, lowercase (unicode) characters, along ASCII equivalents.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/greekletters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Greek Letters in upper and lowercase, and ASCII equivalents — greekletters","text":"","code":"data(greekletters, package = \"SOILmilaR\")"},{"path":"http://humus.rocks/SOILmilaR/reference/greekletters.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Greek Letters in upper and lowercase, and ASCII equivalents — greekletters","text":"object class data.frame 24 rows 4 columns.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/loamy.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthetic Site-level Properties for Loamy Soils — loamy","title":"Synthetic Site-level Properties for Loamy Soils — loamy","text":"data.frame containing unique profile ID, depth, particle size class, along particle size control section depth-weighted average clay content rock fragment volume.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/loamy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthetic Site-level Properties for Loamy Soils — loamy","text":"","code":"data(loamy, package = \"SOILmilaR\")"},{"path":"http://humus.rocks/SOILmilaR/reference/loamy.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Synthetic Site-level Properties for Loamy Soils — loamy","text":"object class data.frame 30 rows 5 columns.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/pscs_weighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Particle Size Control Section Weighted Average — pscs_weighted","title":"Calculate Particle Size Control Section Weighted Average — pscs_weighted","text":"Calculates particle size control section weighted average one variables (vars), using upper lower boundary specified pscsbounds. Profiles truncated interval set bounds, weighted averages calculated column. result number rows number sites input SoilProfileCollection x suitable joining back site table","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/pscs_weighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Particle Size Control Section Weighted Average — pscs_weighted","text":"","code":"pscs_weighted(   x,   vars,   na.rm = FALSE,   pscsbounds = c(\"psctopdepth\", \"pscbotdepth\"),   prefix = \"pscs_\" )"},{"path":"http://humus.rocks/SOILmilaR/reference/pscs_weighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Particle Size Control Section Weighted Average — pscs_weighted","text":"x SoilProfileCollection vars character. Column names numeric variables horizon table x summarize. na.rm logical. Remove NA? Default: FALSE pscsbounds character length 2. Column names numeric variables site table representing profile specific upper lower boundary. Default: \"psctopdepth\" \"pscbotdepth\" prefix character. Prefix append column name, create unique name conflict existing horizon data. Default: \"pscs_\"","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/pscs_weighted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Particle Size Control Section Weighted Average — pscs_weighted","text":"data.frame-like object corresponding aqp_df_class(x)","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/pscs_weighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Particle Size Control Section Weighted Average — pscs_weighted","text":"","code":"# load aqp, and data from soilDB library(aqp) #> This is aqp 2.2-1 data(loafercreek, package = \"soilDB\")  # calculate PSCS weighted clay % and total fragment volume pscs_cf <- pscs_weighted(loafercreek, c(\"clay\", \"fragvoltot\"))  # inspect pscs_cf #>      peiid pscs_clay pscs_fragvoltot #> 1   115595  28.76471        0.000000 #> 2   115819  28.76471        0.000000 #> 3   115827  25.88000        0.000000 #> 4   207242  16.00000       16.770270 #> 5   207255  37.32000       21.440000 #> 6   268820  32.63415       13.853659 #> 7   307957  33.78571        1.285714 #> 8   307961  29.57576        7.727273 #> 9   307963  29.00000        8.000000 #> 10  338021  23.02632       30.789474 #> 11  338022  25.28000       19.400000 #> 12  338023  23.36364       37.454545 #> 13  338024  26.25000       11.666667 #> 14  338025  34.12000       34.460000 #> 15  338026  47.69565       13.695652 #> 16  338027  30.73171       23.780488 #> 17  338028  28.32609       25.543478 #> 18  338029  32.00000       10.714286 #> 19  338040  27.12500       26.250000 #> 20  338041  27.76316       22.894737 #> 21  338042  25.00000       14.777778 #> 22  338043  28.60870        5.000000 #> 23  338044  23.39535       27.093023 #> 24  338045  22.32000        5.000000 #> 25  338046  24.10000       26.140000 #> 26  342445  20.91600       29.000000 #> 27  346008  22.52000       29.000000 #> 28  351695  20.48780       31.390244 #> 29  351700  44.38000       25.180000 #> 30  351701  37.88000       11.500000 #> 31  351703  28.70000        7.500000 #> 32  351716  28.80000       54.420000 #> 33  351717  36.46000        4.700000 #> 34  374201  23.78000       44.140000 #> 35  374205  30.72000       17.360000 #> 36  374216  24.33333       35.733333 #> 37  374219  23.76000        6.640000 #> 38  374232  21.78000       12.440000 #> 39  414895  28.72727        9.772727 #> 40  414934  20.83871       15.258065 #> 41  414936  19.56000       32.460000 #> 42  414938  25.48000       23.000000 #> 43  425293  28.92000       16.900000 #> 44  463690  33.95122       35.243902 #> 45  477042  20.18000        5.680000 #> 46  477055  18.86486       48.135135 #> 47  477056  18.12500       69.270833 #> 48  477057  25.56000       20.000000 #> 49  477059  17.34000       23.980000 #> 50  488565  25.84000       31.360000 #> 51  488568  19.00000        5.000000 #> 52  488573  28.37500       30.000000 #> 53  488578  27.10870       50.543478 #> 54  488581  24.72000       24.200000 #> 55  488582  26.20370       55.000000 #> 56  488587  25.13514       52.027027 #> 57  488596  26.00000       50.000000 #> 58  488602  24.38000       43.900000 #> 59  488636  24.20000       16.720000 #> 60  493742  26.24000       23.560000 #> 61  530603  27.44444        0.000000 #> 62  530611  29.90000        5.000000 #> 63  530649        NA        0.880000 #> 64  530692  42.08000       16.100000 #> 65  530693  28.34000       10.000000 #> 66  530694  29.36842       31.052632 #> 67  530699  23.10000        8.500000 #> 68  530731  24.56818       15.000000 #> 69  530740  29.10000       15.000000 #> 70  530744  24.16000        7.200000 #> 71  530751  28.82000       17.200000 #> 72  533172        NA        0.000000 #> 73  533272  18.77500       17.000000 #> 74  533337        NA        0.000000 #> 75  533462  45.82917       23.791667 #> 76  533888  25.25161        5.967742 #> 77  533889        NA       15.000000 #> 78  542093  20.50000       20.000000 #> 79  542095  21.28889       34.000000 #> 80  542125  24.86000        9.280000 #> 81  542129  32.34000        0.000000 #> 82  542130  33.36585       25.804878 #> 83  542131  31.04000       13.560000 #> 84  542153  23.05405       36.108108 #> 85  542154  17.22000        0.000000 #> 86  620521  26.52000       28.300000 #> 87  620522  29.22000       16.820000 #> 88  620523  20.00000       39.642857 #> 89  625813  24.60000       51.620000 #> 90  625821  19.74000       28.620000 #> 91  640607  18.25000       19.375000 #> 92  640610  20.70000        5.900000 #> 93  640616  31.84000        2.000000 #> 94  640625  21.97959        4.387755 #> 95  640629  32.44737       29.078947 #> 96  640630  29.56000       24.400000 #> 97   64505  22.09412        0.000000 #> 98  839192  21.34000       14.900000 #> 99  839203  27.46154        5.538462 #> 100 894094  26.68000        0.000000 #> 101 894095  20.10526        7.105263 #> 102 894118  31.00000        5.000000 #> 103 894145  22.65000       27.750000  # left join to site table of loafercreek site(loafercreek) <- pscs_cf  loafercreek$pscs_clay #>   [1] 28.76471 28.76471 25.88000       NA 16.00000 37.32000 32.63415       NA #>   [9] 33.78571 29.57576 29.00000 23.02632 25.28000 23.36364 26.25000 34.12000 #>  [17] 47.69565 30.73171 28.32609 32.00000 27.12500 27.76316 25.00000 28.60870 #>  [25] 23.39535 22.32000 24.10000 20.91600 22.52000 20.48780 44.38000 37.88000 #>  [33] 28.70000 28.80000 36.46000 23.78000 30.72000 24.33333 23.76000 21.78000 #>  [41] 28.72727 20.83871 19.56000 25.48000 28.92000 33.95122 20.18000 18.86486 #>  [49] 18.12500 25.56000 17.34000 25.84000 19.00000 28.37500 27.10870 24.72000 #>  [57] 26.20370 25.13514 26.00000 24.38000 24.20000 26.24000 27.44444 29.90000 #>  [65]       NA 42.08000 28.34000 29.36842 23.10000 24.56818 29.10000 24.16000 #>  [73] 28.82000       NA 18.77500       NA 45.82917 25.25161       NA 20.50000 #>  [81] 21.28889 24.86000 32.34000 33.36585 31.04000 23.05405 17.22000 26.52000 #>  [89] 29.22000 20.00000 24.60000 19.74000 18.25000 20.70000 31.84000 21.97959 #>  [97] 32.44737 29.56000       NA 22.09412 21.34000 27.46154 26.68000 20.10526 #> [105] 31.00000 22.65000"},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":null,"dir":"Reference","previous_headings":"","what":"Similar Soil Contrasts — similar_soils","title":"Similar Soil Contrasts — similar_soils","text":"method applying standardized, customizable \"similar soils\" rules site-level data derived various sources.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Similar Soil Contrasts — similar_soils","text":"","code":"similar_soils(   x,   mapping,   condition = NULL,   idname = \"id\",   thresh = NULL,   thresh_single = 2,   thresh_all = 3,   absolute = TRUE,   verbose = TRUE )"},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Similar Soil Contrasts — similar_soils","text":"x data.frame SoilProfileCollection mapping named list functions. List element names refer site-level data columns x. specified function provides conversion data element x value used \"similar soils\" calculation. condition integer character. Default: NULL value calculated internally based dominant condition intersection mapping results x. may specify integer row ID x specific similar soil contrasts, can specify character dominant condition equivalent name assigned interaction() e.g. \"4.3\" two rating mapping result first rating value 4 second value 3 idname ID column name, default \"id\" thresh Deprecated. used passed thresh_all. thresh_single Sum differences relative dominant condition x. Default 1. See details discussion default calculation similarity. thresh_all Sum differences relative dominant condition x. Default 1. See details discussion default calculation similarity. absolute logical. Report absolute difference? Default: TRUE. Absolute difference always used comparison thresh. verbose Default: TRUE message selected condition","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Similar Soil Contrasts — similar_soils","text":"data.frame containing inputs three new columns: similar_single (maximum difference one property, relative condition), similar_dist (cumulative sum differences relative condition), similar (logical; soil similar condition)","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Similar Soil Contrasts — similar_soils","text":"sum differences across conditions (specified intersection output functions mapping) used \"distance\" soil relative dominant (otherwise specified) condition. threshold value used decide \"similar\" . functions mapping can customized use alternate thresholds.","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Similar Soil Contrasts — similar_soils","text":"Norfleet, M.L. Eppinette, R.T. (1993), Mathematical Model Determining Similar Contrasting Inclusions Map Unit Descriptons. Soil Survey Horizons, 34: 4-5. https://doi.org/10.2136/sh1993.1.0004","code":""},{"path":"http://humus.rocks/SOILmilaR/reference/similar_soils.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Similar Soil Contrasts — similar_soils","text":"","code":"data(loamy, package = \"SOILmilaR\")  rate_taxpartsize <- function(x) {   dplyr::case_match(x,                     c(\"sandy-skeletal\") ~ 1,                     c(\"sandy\") ~ 3,                     c(\"loamy\", \"coarse-loamy\", \"coarse-silty\") ~ 5,                     c(\"fine-loamy\", \"fine-silty\") ~ 7,                     c(\"clayey\", \"fine\") ~ 9,                     c(\"very-fine\") ~ 11,                     c(\"loamy-skeletal\", \"clayey-skeletal\") ~ 13,                     \"fragmental\" ~ 15) }   rate_depthclass <- function(x, breaks = c( `very shallow` = 25, `shallow` =   50, `moderately deep` = 100, `deep` = 150, `very deep` = 1e4 ), pattern =   \"R|Cr|Cd|kk|m\", hzdesgn = aqp::guessHzDesgnName(x, required = TRUE),                             ...) {   res <- cut(x, c(0, breaks))   factor(res, levels = levels(res), labels = names(breaks), ordered = TRUE) }  rate_pscs_clay <- function(x,                            breaks = c(18, 27, 40, 60, 100)) {   res <- cut(x, c(0, breaks))   factor(res, levels = levels(res), ordered = TRUE) }  m <- list(taxpartsize = rate_taxpartsize, depth = rate_depthclass, pscs_clay = rate_pscs_clay)  s <- similar_soils(loamy, m) #> comparing to dominant reference condition (`13.moderately deep.(0,18]` on 5 rows) head(s) #>   id taxpartsize           depth pscs_clay similar_dist similar_single #> 1 A1           7 moderately deep   (27,40]            8              6 #> 2 B1           7            deep   (18,27]            8              6 #> 3 C1           7 moderately deep   (27,40]            8              6 #> 4 D1           7            deep   (27,40]            9              6 #> 5 E1           5            deep    (0,18]            9              8 #> 6 F1           5         shallow    (0,18]            9              8 #>                       group similar #> 1 7.moderately deep.(27,40]   FALSE #> 2            7.deep.(18,27]   FALSE #> 3 7.moderately deep.(27,40]   FALSE #> 4            7.deep.(27,40]   FALSE #> 5             5.deep.(0,18]   FALSE #> 6          5.shallow.(0,18]   FALSE  # inspect distances using agglomerative clustering+dendrogram d <- cluster::agnes(s[, 5, drop = FALSE], method=\"gaverage\") d$height <- d$height + 0.2 # fudge factor for 0-distance plot(stats::as.dendrogram(d), center=TRUE, type=\"triangle\")   # allow relative contrast ratings to be negative # (i.e. ordinal factors, concept of \"limiting\") # absolute value is still used for \"similar\" threshold s2 <- similar_soils(loamy, m, absolute=FALSE) #> comparing to dominant reference condition (`13.moderately deep.(0,18]` on 5 rows)  # inspect distances using agglomerative clustering+dendrogram d2 <- cluster::agnes(s2[, 5, drop = FALSE], method=\"gaverage\") d2$height <- d2$height + 0.2 # fudge factor for 0-distance plot(stats::as.dendrogram(d2), center=TRUE, type=\"triangle\")"},{"path":"http://humus.rocks/SOILmilaR/news/index.html","id":"soilmilar-010","dir":"Changelog","previous_headings":"","what":"SOILmilaR 0.1.0","title":"SOILmilaR 0.1.0","text":"Deprecate thresh argument, replaced thresh_single (maximum difference one property) thresh_all (sum differences across properties) Threshold logic now uses < instead <= consistent many similar soils guides Add design_mapunit() function iterative calls similar_soils() exhaustively group observations (example, within map unit conceptual unit interest)","code":""}]
